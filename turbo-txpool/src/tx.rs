use crate::error::{Error, RlpResultExt};

use ethereum_types::{Address, H256, U256};

pub use k256::ecdsa::Error as EcdsaError;
use k256::ecdsa::{self, recoverable};
use k256::EncodedPoint;

use std::convert::{TryFrom, TryInto};

use tiny_keccak::{Hasher, Keccak};

fn keccak(input: &[u8]) -> [u8; 32] {
    let mut keccak = Keccak::v256();
    keccak.update(input);

    let mut output = [0u8; 32];
    keccak.finalize(&mut output);
    output
}

#[derive(Debug, Clone)]
pub struct VerifiedTx {
    hash: H256,
    from: Address,
    tx: Tx,
}

impl VerifiedTx {
    pub fn new(tx: Tx) -> Result<Self, EcdsaError> {
        let v = 1 - (tx.v % 2);
        let mut r = [0u8; 32];
        tx.r.to_big_endian(&mut r);
        let mut s = [0u8; 32];
        tx.s.to_big_endian(&mut s);

        let sig = recoverable::Signature::new(
            &ecdsa::Signature::from_scalars(r, s)?,
            recoverable::Id::new(v.try_into().unwrap())?,
        )?;

        let mut stream = rlp::RlpStream::new();
        tx.signature_encode(&mut stream);
        let vkey = sig.recover_verify_key(stream.as_raw())?;

        let point = EncodedPoint::from(&vkey).decompress();

        let pubkey = match point {
            Some(k) => k.to_bytes(),
            None => return Err(EcdsaError::new()),
        };

        let from = Address::from_slice(&keccak(&pubkey[1..])[12..]);

        stream.clear();
        tx.encode(&mut stream);
        let hash = H256::from(keccak(stream.as_raw()));

        Ok(Self { hash, from, tx })
    }

    pub fn gas_price(&self) -> &U256 {
        &self.tx.gas_price
    }

    pub fn hash(&self) -> &H256 {
        &self.hash
    }

    pub fn tx(&self) -> &Tx {
        &self.tx
    }

    // TODO: Add getters as needed.
}

impl TryFrom<Tx> for VerifiedTx {
    type Error = EcdsaError;

    fn try_from(tx: Tx) -> Result<Self, Self::Error> {
        VerifiedTx::new(tx)
    }
}

impl Eq for VerifiedTx {}

impl PartialEq for VerifiedTx {
    fn eq(&self, other: &Self) -> bool {
        self.hash == other.hash
    }
}

#[derive(Debug, Eq, PartialEq, Clone)]
pub struct Tx {
    pub nonce: u64,
    pub to: Option<Address>,
    pub value: U256,
    pub gas_price: U256,
    pub gas_limit: u64,
    pub input: Vec<u8>,
    pub v: u64,
    pub r: U256,
    pub s: U256,
}

impl Tx {
    fn signature_encode(&self, stream: &mut rlp::RlpStream) {
        if self.v >= 35 {
            self.signature_encode_9(stream);
        } else {
            self.signature_encode_6(stream);
        }
    }

    fn signature_encode_6(&self, stream: &mut rlp::RlpStream) {
        stream.begin_list(6);
        stream.append(&U256::from(self.nonce));
        stream.append(&self.gas_price);
        stream.append(&U256::from(self.gas_limit));
        match self.to {
            None => {
                stream.append_empty_data();
            }
            Some(to) => {
                stream.append(&to);
            }
        }
        stream.append(&self.value);
        stream.append(&self.input);
    }

    fn signature_encode_9(&self, stream: &mut rlp::RlpStream) {
        let chainid = (self.v - 35) / 2;
        stream.begin_list(9);
        stream.append(&U256::from(self.nonce));
        stream.append(&self.gas_price);
        stream.append(&U256::from(self.gas_limit));
        match self.to {
            None => {
                stream.append_empty_data();
            }
            Some(to) => {
                stream.append(&to);
            }
        }
        stream.append(&self.value);
        stream.append(&self.input);
        stream.append(&chainid);
        stream.append(&0u8);
        stream.append(&0u8);
    }

    pub fn encode(&self, stream: &mut rlp::RlpStream) {
        stream.begin_list(9);
        stream.append(&U256::from(self.nonce));
        stream.append(&self.gas_price);
        stream.append(&U256::from(self.gas_limit));
        match self.to {
            None => {
                stream.append_empty_data();
            }
            Some(to) => {
                stream.append(&to);
            }
        }
        stream.append(&self.value);
        stream.append(&self.input);
        stream.append(&self.v);
        stream.append(&self.r);
        stream.append(&self.s);
    }

    pub fn decode(stream: &rlp::Rlp) -> Result<Self, Error> {
        let to = {
            let field = stream.at(3).context_field("to")?;
            if field.is_empty() {
                if field.is_data() {
                    None
                } else {
                    return Err(Error::RlpDecode {
                        source: rlp::DecoderError::RlpExpectedToBeData,
                        field: Some("to"),
                    });
                }
            } else {
                Some(field.as_val().context_field("to")?)
            }
        };

        let v = stream.val_at(6).context_field("v")?;
        let r = stream.val_at(7).context_field("r")?;
        let s = stream.val_at(8).context_field("s")?;

        let nonce = match stream.val_at::<U256>(0).context_field("nonce")? {
            x if x > u64::max_value().into() => {
                return Err(Error::IntegerOverflow);
            }
            x => x.as_u64(),
        };

        let gas_limit =
            match stream.val_at::<U256>(2).context_field("gas_limit")? {
                x if x > u64::max_value().into() => {
                    return Err(Error::IntegerOverflow);
                }
                x => x.as_u64(),
            };

        Ok(Self {
            nonce,
            gas_price: stream.val_at(1).context_field("gas_price")?,
            gas_limit,
            to,
            value: stream.val_at(4).context_field("value")?,
            input: stream.val_at(5).context_field("input")?,
            v,
            r,
            s,
        })
    }
}

#[derive(Debug, Ord, PartialOrd, Eq, PartialEq)]
pub struct Priced {
    pub gas_price: U256,
    pub key: usize,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn encode_deploy() {
        let input = vec![
            0x60, 0x80, 0x60, 0x40, 0x52, 0x33, 0x60, 0x00, 0x80, 0x61, 0x01,
            0x00, 0x0a, 0x81, 0x54, 0x81, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0x02, 0x19, 0x16, 0x90, 0x83, 0x73, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x02, 0x17,
            0x90, 0x55, 0x50, 0x34, 0x80, 0x15, 0x61, 0x00, 0x50, 0x57, 0x60,
            0x00, 0x80, 0xfd, 0x5b, 0x50, 0x61, 0x02, 0x07, 0x80, 0x61, 0x00,
            0x60, 0x60, 0x00, 0x39, 0x60, 0x00, 0xf3, 0xfe, 0x60, 0x80, 0x60,
            0x40, 0x52, 0x34, 0x80, 0x15, 0x61, 0x00, 0x10, 0x57, 0x60, 0x00,
            0x80, 0xfd, 0x5b, 0x50, 0x60, 0x04, 0x36, 0x10, 0x61, 0x00, 0x41,
            0x57, 0x60, 0x00, 0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0x44, 0x5d,
            0xf0, 0xac, 0x14, 0x61, 0x00, 0x46, 0x57, 0x80, 0x63, 0x8d, 0xa5,
            0xcb, 0x5b, 0x14, 0x61, 0x00, 0x64, 0x57, 0x80, 0x63, 0xfd, 0xac,
            0xd5, 0x76, 0x14, 0x61, 0x00, 0x98, 0x57, 0x5b, 0x60, 0x00, 0x80,
            0xfd, 0x5b, 0x61, 0x00, 0x4e, 0x61, 0x00, 0xc6, 0x56, 0x5b, 0x60,
            0x40, 0x51, 0x80, 0x82, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91, 0x50,
            0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x61,
            0x00, 0x6c, 0x61, 0x00, 0xcc, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80,
            0x82, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x16, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40,
            0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x61, 0x00, 0xc4, 0x60,
            0x04, 0x80, 0x36, 0x03, 0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x00,
            0xae, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x81, 0x01, 0x90, 0x80,
            0x80, 0x35, 0x90, 0x60, 0x20, 0x01, 0x90, 0x92, 0x91, 0x90, 0x50,
            0x50, 0x50, 0x61, 0x00, 0xf0, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x01,
            0x54, 0x81, 0x56, 0x5b, 0x60, 0x00, 0x80, 0x54, 0x90, 0x61, 0x01,
            0x00, 0x0a, 0x90, 0x04, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0x16, 0x81, 0x56, 0x5b, 0x60, 0x00, 0x80, 0x54,
            0x90, 0x61, 0x01, 0x00, 0x0a, 0x90, 0x04, 0x73, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x33, 0x73, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x14, 0x61, 0x01,
            0x94, 0x57, 0x60, 0x40, 0x51, 0x7f, 0x08, 0xc3, 0x79, 0xa0, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x52, 0x60, 0x04, 0x01, 0x80,
            0x80, 0x60, 0x20, 0x01, 0x82, 0x81, 0x03, 0x82, 0x52, 0x60, 0x33,
            0x81, 0x52, 0x60, 0x20, 0x01, 0x80, 0x61, 0x01, 0x9f, 0x60, 0x33,
            0x91, 0x39, 0x60, 0x40, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40, 0x51,
            0x80, 0x91, 0x03, 0x90, 0xfd, 0x5b, 0x80, 0x60, 0x01, 0x81, 0x90,
            0x55, 0x50, 0x50, 0x56, 0xfe, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66,
            0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20,
            0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20,
            0x74, 0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74,
            0x72, 0x61, 0x63, 0x74, 0x27, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x65,
            0x72, 0xa2, 0x64, 0x69, 0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20,
            0x84, 0x00, 0xe0, 0x28, 0x6a, 0xf3, 0x71, 0xce, 0x92, 0x02, 0x75,
            0xae, 0x3f, 0xb3, 0x32, 0x72, 0x5a, 0xb7, 0x61, 0x1f, 0xc4, 0xe1,
            0xe0, 0xbe, 0xf2, 0x40, 0x19, 0xef, 0x72, 0x4b, 0x0e, 0x44, 0x64,
            0x73, 0x6f, 0x6c, 0x63, 0x43, 0x00, 0x06, 0x0c, 0x00, 0x33,
        ];

        let r = U256::from([
            0x24, 0x18, 0x81, 0xbc, 0x2b, 0x3c, 0x3f, 0xd9, 0x40, 0xaa, 0xec,
            0x9d, 0xe4, 0x25, 0x40, 0x9d, 0x63, 0xf1, 0xc2, 0x10, 0x1a, 0xae,
            0x76, 0xdc, 0x1f, 0xf6, 0x74, 0x7d, 0x89, 0x98, 0xf3, 0xe6,
        ]);

        let s = U256::from([
            0x5f, 0xed, 0x35, 0x53, 0x6d, 0xb8, 0xa9, 0xc9, 0x0c, 0x1d, 0x1e,
            0x3a, 0x9d, 0x8b, 0x66, 0x69, 0xd4, 0xd3, 0xb0, 0x72, 0x22, 0x28,
            0xe3, 0x8e, 0x6f, 0x6c, 0xc5, 0x71, 0x27, 0x2e, 0xd0, 0xab,
        ]);

        let tx = Tx {
            value: 0.into(),
            to: None,
            gas_limit: 6_721_975,
            gas_price: 20_000_000_000u64.into(),
            input,
            nonce: 82,
            v: 28,
            r,
            s,
        };

        let mut stream = rlp::RlpStream::new();
        tx.encode(&mut stream);
        let actual = stream.as_raw();

        let expected: &[_] = &[
            0xf9, 0x02, 0xba, 0x52, 0x85, 0x04, 0xa8, 0x17, 0xc8, 0x00, 0x83,
            0x66, 0x91, 0xb7, 0x80, 0x80, 0xb9, 0x02, 0x67, 0x60, 0x80, 0x60,
            0x40, 0x52, 0x33, 0x60, 0x00, 0x80, 0x61, 0x01, 0x00, 0x0a, 0x81,
            0x54, 0x81, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0x02, 0x19, 0x16, 0x90, 0x83, 0x73, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x02, 0x17, 0x90, 0x55, 0x50,
            0x34, 0x80, 0x15, 0x61, 0x00, 0x50, 0x57, 0x60, 0x00, 0x80, 0xfd,
            0x5b, 0x50, 0x61, 0x02, 0x07, 0x80, 0x61, 0x00, 0x60, 0x60, 0x00,
            0x39, 0x60, 0x00, 0xf3, 0xfe, 0x60, 0x80, 0x60, 0x40, 0x52, 0x34,
            0x80, 0x15, 0x61, 0x00, 0x10, 0x57, 0x60, 0x00, 0x80, 0xfd, 0x5b,
            0x50, 0x60, 0x04, 0x36, 0x10, 0x61, 0x00, 0x41, 0x57, 0x60, 0x00,
            0x35, 0x60, 0xe0, 0x1c, 0x80, 0x63, 0x44, 0x5d, 0xf0, 0xac, 0x14,
            0x61, 0x00, 0x46, 0x57, 0x80, 0x63, 0x8d, 0xa5, 0xcb, 0x5b, 0x14,
            0x61, 0x00, 0x64, 0x57, 0x80, 0x63, 0xfd, 0xac, 0xd5, 0x76, 0x14,
            0x61, 0x00, 0x98, 0x57, 0x5b, 0x60, 0x00, 0x80, 0xfd, 0x5b, 0x61,
            0x00, 0x4e, 0x61, 0x00, 0xc6, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80,
            0x82, 0x81, 0x52, 0x60, 0x20, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40,
            0x51, 0x80, 0x91, 0x03, 0x90, 0xf3, 0x5b, 0x61, 0x00, 0x6c, 0x61,
            0x00, 0xcc, 0x56, 0x5b, 0x60, 0x40, 0x51, 0x80, 0x82, 0x73, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16, 0x81, 0x52,
            0x60, 0x20, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91,
            0x03, 0x90, 0xf3, 0x5b, 0x61, 0x00, 0xc4, 0x60, 0x04, 0x80, 0x36,
            0x03, 0x60, 0x20, 0x81, 0x10, 0x15, 0x61, 0x00, 0xae, 0x57, 0x60,
            0x00, 0x80, 0xfd, 0x5b, 0x81, 0x01, 0x90, 0x80, 0x80, 0x35, 0x90,
            0x60, 0x20, 0x01, 0x90, 0x92, 0x91, 0x90, 0x50, 0x50, 0x50, 0x61,
            0x00, 0xf0, 0x56, 0x5b, 0x00, 0x5b, 0x60, 0x01, 0x54, 0x81, 0x56,
            0x5b, 0x60, 0x00, 0x80, 0x54, 0x90, 0x61, 0x01, 0x00, 0x0a, 0x90,
            0x04, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0x16, 0x81, 0x56, 0x5b, 0x60, 0x00, 0x80, 0x54, 0x90, 0x61, 0x01,
            0x00, 0x0a, 0x90, 0x04, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0x16, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0x16, 0x33, 0x73, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0xff, 0xff, 0x16, 0x14, 0x61, 0x01, 0x94, 0x57, 0x60,
            0x40, 0x51, 0x7f, 0x08, 0xc3, 0x79, 0xa0, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x81, 0x52, 0x60, 0x04, 0x01, 0x80, 0x80, 0x60, 0x20,
            0x01, 0x82, 0x81, 0x03, 0x82, 0x52, 0x60, 0x33, 0x81, 0x52, 0x60,
            0x20, 0x01, 0x80, 0x61, 0x01, 0x9f, 0x60, 0x33, 0x91, 0x39, 0x60,
            0x40, 0x01, 0x91, 0x50, 0x50, 0x60, 0x40, 0x51, 0x80, 0x91, 0x03,
            0x90, 0xfd, 0x5b, 0x80, 0x60, 0x01, 0x81, 0x90, 0x55, 0x50, 0x50,
            0x56, 0xfe, 0x54, 0x68, 0x69, 0x73, 0x20, 0x66, 0x75, 0x6e, 0x63,
            0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x20, 0x72, 0x65, 0x73,
            0x74, 0x72, 0x69, 0x63, 0x74, 0x65, 0x64, 0x20, 0x74, 0x6f, 0x20,
            0x74, 0x68, 0x65, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
            0x74, 0x27, 0x73, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0xa2, 0x64,
            0x69, 0x70, 0x66, 0x73, 0x58, 0x22, 0x12, 0x20, 0x84, 0x00, 0xe0,
            0x28, 0x6a, 0xf3, 0x71, 0xce, 0x92, 0x02, 0x75, 0xae, 0x3f, 0xb3,
            0x32, 0x72, 0x5a, 0xb7, 0x61, 0x1f, 0xc4, 0xe1, 0xe0, 0xbe, 0xf2,
            0x40, 0x19, 0xef, 0x72, 0x4b, 0x0e, 0x44, 0x64, 0x73, 0x6f, 0x6c,
            0x63, 0x43, 0x00, 0x06, 0x0c, 0x00, 0x33, 0x1c, 0xa0, 0x24, 0x18,
            0x81, 0xbc, 0x2b, 0x3c, 0x3f, 0xd9, 0x40, 0xaa, 0xec, 0x9d, 0xe4,
            0x25, 0x40, 0x9d, 0x63, 0xf1, 0xc2, 0x10, 0x1a, 0xae, 0x76, 0xdc,
            0x1f, 0xf6, 0x74, 0x7d, 0x89, 0x98, 0xf3, 0xe6, 0xa0, 0x5f, 0xed,
            0x35, 0x53, 0x6d, 0xb8, 0xa9, 0xc9, 0x0c, 0x1d, 0x1e, 0x3a, 0x9d,
            0x8b, 0x66, 0x69, 0xd4, 0xd3, 0xb0, 0x72, 0x22, 0x28, 0xe3, 0x8e,
            0x6f, 0x6c, 0xc5, 0x71, 0x27, 0x2e, 0xd0, 0xab,
        ];

        assert_eq!(expected, actual);
    }

    #[test]
    fn decode() -> Result<(), Error> {
        let txbytes = [
            0xf8, 0x65, 0x80, 0x01, 0x88, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff,
            0xff, 0xff, 0x94, 0x09, 0x5e, 0x7b, 0xae, 0xa6, 0xa6, 0xc7, 0xc4,
            0xc2, 0xdf, 0xeb, 0x97, 0x7e, 0xfa, 0xc3, 0x26, 0xaf, 0x55, 0x2d,
            0x87, 0x80, 0x80, 0x1b, 0xa0, 0x48, 0xb5, 0x5b, 0xfa, 0x91, 0x5a,
            0xc7, 0x95, 0xc4, 0x31, 0x97, 0x8d, 0x8a, 0x6a, 0x99, 0x2b, 0x62,
            0x8d, 0x55, 0x7d, 0xa5, 0xff, 0x75, 0x9b, 0x30, 0x7d, 0x49, 0x5a,
            0x36, 0x64, 0x93, 0x53, 0xa0, 0xef, 0xff, 0xd3, 0x10, 0xac, 0x74,
            0x3f, 0x37, 0x1d, 0xe3, 0xb9, 0xf7, 0xf9, 0xcb, 0x56, 0xc0, 0xb2,
            0x8a, 0xd4, 0x36, 0x01, 0xb4, 0xab, 0x94, 0x9f, 0x53, 0xfa, 0xa0,
            0x7b, 0xd2, 0xc8, 0x04,
        ];

        let tx = Tx::decode(&rlp::Rlp::new(&txbytes))?;
        assert_eq!(tx.input, &[]);
        assert_eq!(tx.gas_limit, 0x7fffffffffffffff);
        assert_eq!(tx.gas_price, 1.into());
        assert_eq!(tx.nonce, 0);
        assert_eq!(tx.value, 0.into());
        assert_eq!(tx.v, 27);
        assert_eq!(
            tx.to,
            Some(
                [
                    0x09, 0x5e, 0x7b, 0xae, 0xa6, 0xa6, 0xc7, 0xc4, 0xc2, 0xdf,
                    0xeb, 0x97, 0x7e, 0xfa, 0xc3, 0x26, 0xaf, 0x55, 0x2d, 0x87
                ]
                .into()
            )
        );
        assert_eq!(
            tx.r,
            [
                0x48, 0xb5, 0x5b, 0xfa, 0x91, 0x5a, 0xc7, 0x95, 0xc4, 0x31,
                0x97, 0x8d, 0x8a, 0x6a, 0x99, 0x2b, 0x62, 0x8d, 0x55, 0x7d,
                0xa5, 0xff, 0x75, 0x9b, 0x30, 0x7d, 0x49, 0x5a, 0x36, 0x64,
                0x93, 0x53
            ]
            .into()
        );

        assert_eq!(
            tx.s,
            [
                0xef, 0xff, 0xd3, 0x10, 0xac, 0x74, 0x3f, 0x37, 0x1d, 0xe3,
                0xb9, 0xf7, 0xf9, 0xcb, 0x56, 0xc0, 0xb2, 0x8a, 0xd4, 0x36,
                0x01, 0xb4, 0xab, 0x94, 0x9f, 0x53, 0xfa, 0xa0, 0x7b, 0xd2,
                0xc8, 0x04,
            ]
            .into()
        );

        let vtx = VerifiedTx::new(tx).unwrap();
        let hash = H256::from([
            0x20, 0x94, 0x66, 0xe8, 0xf6, 0xb9, 0x69, 0xc2, 0x07, 0x5b, 0xf5,
            0x46, 0x93, 0x82, 0x65, 0xa1, 0x3e, 0xee, 0x23, 0xca, 0xf7, 0xd5,
            0x9e, 0x4d, 0x7c, 0x4e, 0x54, 0xc2, 0x6e, 0xb4, 0x82, 0xec,
        ]);
        assert_eq!(vtx.hash, hash);

        Ok(())
    }

    #[test]
    fn decode_1000000() -> Result<(), Error> {
        let txbytes = [
            0xf8, 0x6e, 0x15, 0x85, 0x12, 0xbf, 0xb1, 0x9e, 0x60, 0x83, 0x01,
            0xf8, 0xdc, 0x94, 0xc0, 0x83, 0xe9, 0x94, 0x7c, 0xf0, 0x2b, 0x8f,
            0xfc, 0x7d, 0x30, 0x90, 0xae, 0x9a, 0xea, 0x72, 0xdf, 0x98, 0xfd,
            0x47, 0x89, 0x05, 0x6b, 0xc7, 0x5e, 0x2d, 0x63, 0x10, 0x00, 0x00,
            0x80, 0x1c, 0xa0, 0xa2, 0x54, 0xfe, 0x08, 0x5f, 0x72, 0x1c, 0x2a,
            0xbe, 0x00, 0xa2, 0xcd, 0x24, 0x41, 0x10, 0xbf, 0xc0, 0xdf, 0x5f,
            0x4f, 0x25, 0x46, 0x1c, 0x85, 0xd8, 0xab, 0x75, 0xeb, 0xac, 0x11,
            0xeb, 0x10, 0xa0, 0x30, 0xb7, 0x83, 0x5b, 0xa4, 0x81, 0x95, 0x5b,
            0x20, 0x19, 0x3a, 0x70, 0x3e, 0xbc, 0x5f, 0xdf, 0xfe, 0xab, 0x08,
            0x1d, 0x63, 0x11, 0x71, 0x99, 0x04, 0x0c, 0xdf, 0x5a, 0x91, 0xc6,
            0x87, 0x65,
        ];

        let tx = Tx::decode(&rlp::Rlp::new(&txbytes))?;
        assert_eq!(tx.input, &[]);
        assert_eq!(tx.gas_limit, 129244);
        assert_eq!(tx.gas_price, 80525500000u64.into());
        assert_eq!(tx.nonce, 21);
        assert_eq!(tx.value, 100000000000000000000u128.into());
        assert_eq!(tx.v, 0x1c);
        assert_eq!(
            tx.to,
            Some(
                [
                    0xc0, 0x83, 0xe9, 0x94, 0x7c, 0xf0, 0x2b, 0x8f, 0xfc, 0x7d,
                    0x30, 0x90, 0xae, 0x9a, 0xea, 0x72, 0xdf, 0x98, 0xfd, 0x47,
                ]
                .into()
            )
        );
        assert_eq!(
            tx.r,
            [
                0xa2, 0x54, 0xfe, 0x08, 0x5f, 0x72, 0x1c, 0x2a, 0xbe, 0x00,
                0xa2, 0xcd, 0x24, 0x41, 0x10, 0xbf, 0xc0, 0xdf, 0x5f, 0x4f,
                0x25, 0x46, 0x1c, 0x85, 0xd8, 0xab, 0x75, 0xeb, 0xac, 0x11,
                0xeb, 0x10,
            ]
            .into()
        );

        assert_eq!(
            tx.s,
            [
                0x30, 0xb7, 0x83, 0x5b, 0xa4, 0x81, 0x95, 0x5b, 0x20, 0x19,
                0x3a, 0x70, 0x3e, 0xbc, 0x5f, 0xdf, 0xfe, 0xab, 0x08, 0x1d,
                0x63, 0x11, 0x71, 0x99, 0x04, 0x0c, 0xdf, 0x5a, 0x91, 0xc6,
                0x87, 0x65,
            ]
            .into()
        );

        let vtx = VerifiedTx::new(tx).unwrap();
        let hash = H256::from([
            0xea, 0x10, 0x93, 0xd4, 0x92, 0xa1, 0xdc, 0xb1, 0xbe, 0xf7, 0x08,
            0xf7, 0x71, 0xa9, 0x9a, 0x96, 0xff, 0x05, 0xdc, 0xab, 0x81, 0xca,
            0x76, 0xc3, 0x19, 0x40, 0x30, 0x01, 0x77, 0xfc, 0xf4, 0x9f,
        ]);
        assert_eq!(vtx.hash, hash);

        let from = Address::from([
            0x39, 0xfa, 0x8c, 0x5f, 0x27, 0x93, 0x45, 0x9d, 0x66, 0x22, 0x85,
            0x7e, 0x7d, 0x9f, 0xbb, 0x4b, 0xd9, 0x17, 0x66, 0xd3,
        ]);
        assert_eq!(vtx.from, from);

        Ok(())
    }
}
